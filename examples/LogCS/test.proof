\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sat Jun 20 18:12:37 CEST 2020
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_COMPLETION
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , optimisedSelectRules-optimisedSelectRules\\:on , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "V0_RingBuffer";

\proofObligation "#Proof Obligation Settings
#Sat Jun 20 18:12:37 CEST 2020
name=Log[Log\\:\\:add(int)].JML normal_behavior operation contract.0
contract=Log[Log\\:\\:add(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Elias" ) (keyVersion "e4df9595ed61dca049b75d09c26e18eda0430c8a"))

(autoModeTime "739")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "8") (term "1,0,0,1,0,1"))
(rule "assignment" (formula "8") (term "1"))
(builtin "One Step Simplification" (formula "8"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_add,savedHeapBefore_add"))
(builtin "One Step Simplification" (formula "8"))
(rule "eval_order_access4" (formula "8") (inst "#v1=x") (inst "#v0=l"))
(branch "Normal Execution (this != null)"
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "l"))
   (rule "assignment" (formula "8") (term "1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x"))
   (builtin "Use Operation Contract" (formula "8") (newnames "heapBefore_rotateLog,result,exc_0,heapAfter_rotateLog,anon_heap_rotateLog") (contract "Log[Log::rotateLog()].JML normal_behavior operation contract.0"))
   (branch "Post (rotateLog)"
      (builtin "One Step Simplification" (formula "8"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "eqSymm" (formula "12"))
      (rule "assignment" (formula "14") (term "1"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "assignment_write_attribute" (formula "14"))
      (branch "Normal Execution (l != null)"
         (builtin "One Step Simplification" (formula "14"))
         (rule "eval_order_array_access1" (formula "14") (term "1") (inst "#v0=x_arr"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_arr"))
         (rule "assignment_read_attribute_this" (formula "14"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "dismissNonSelectedField" (formula "14") (term "0,1,0"))
         (rule "pullOutSelect" (formula "14") (term "0,1,0") (inst "selectSK=Log_logRecord_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "3")))
         (rule "eval_order_array_access2" (formula "15") (term "1") (inst "#v0=x") (inst "#ar1=x_arr_1"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_arr_1"))
         (rule "assignment" (formula "15") (term "1"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_1"))
         (rule "assignment_read_attribute_this" (formula "15"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "pullOutSelect" (formula "15") (term "0,1,0") (inst "selectSK=Log_last_0"))
         (rule "simplifySelectOfStore" (formula "1"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "16") (term "0,1,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "assignment_to_primitive_array_component" (formula "15"))
         (branch "Normal Execution (x_arr_1 != null)"
            (builtin "One Step Simplification" (formula "15"))
            (rule "methodCallEmpty" (formula "15") (term "1"))
            (rule "tryEmpty" (formula "15") (term "1"))
            (rule "emptyModality" (formula "15") (term "1"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "eqSymm" (formula "15") (term "1,0,0,1"))
            (rule "commute_and" (formula "15") (term "0"))
            (rule "ifthenelse_split" (formula "1") (term "0"))
            (branch "(self, logRecord) in rotateLogA(heap, self) TRUE"
               (rule "applyEqReverse" (formula "16") (term "1,0,1,0") (ifseqformula "2"))
               (rule "applyEqReverse" (formula "16") (term "1,0,0,0") (ifseqformula "2"))
               (rule "applyEqReverse" (formula "16") (term "1,0,0,1,0,0,1") (ifseqformula "2"))
               (rule "hideAuxiliaryEq" (formula "2"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "1,0,1,0") (ifseqformula "8"))
               (rule "cut_direct" (formula "1") (term "0"))
               (branch "CUT: anon_heap_rotateLog<<anonHeapFunction>>[self.logRecord] = null TRUE"
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "applyEq" (formula "16") (term "1,0,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "16") (term "1,0,0,1,0,0,1") (ifseqformula "1"))
                  (rule "applyEq" (formula "16") (term "1,0,1,0") (ifseqformula "1"))
                  (rule "cut_direct" (formula "16") (term "0,0"))
                  (branch "CUT: heapAfter_rotateLog{self.last := result || null.arr(result) := bal}[self.<inv>] TRUE"
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "cut_direct" (formula "17") (term "0"))
                     (branch "CUT: Log_addE(heapAfter_rotateLog{self.last := result || null.arr(result) := bal}, heap, self, bal) TRUE"
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "allRight" (formula "18") (inst "sk=f_2"))
                        (rule "allRight" (formula "18") (inst "sk=o_2"))
                        (rule "orRight" (formula "18"))
                        (rule "orRight" (formula "18"))
                        (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=f_2_0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "21"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_2_1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_2_2"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
                        (rule "commute_and" (formula "3") (term "0,0"))
                        (rule "commute_and" (formula "2") (term "0,0"))
                        (rule "cut_direct" (formula "22") (term "0,0"))
                        (branch "CUT: o_2 = null TRUE"
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "false_right" (formula "23"))
                           (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "applyEq" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "3") (term "1,0,0"))
                           (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "applyEqRigid" (formula "22") (term "1,0") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "2") (term "1,1,0") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "2") (term "1,2,0") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "21") (term "0") (ifseqformula "1"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch " (null, f_2) in rotateLogA(heap, self) & !f_2 = <created> TRUE"
                              (rule "andLeft" (formula "2"))
                              (rule "notLeft" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "ifthenelse_split" (formula "3") (term "0"))
                              (branch "f_2 = arr(result) TRUE"
                                 (rule "applyEqReverse" (formula "24") (term "1") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "applyEq" (formula "20") (term "0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "false_right" (formula "20"))
                                 (rule "applyEq" (formula "2") (term "1") (ifseqformula "3"))
                                 (rule "applyEq" (formula "21") (term "1") (ifseqformula "3"))
                                 (rule "applyEq" (formula "22") (term "2,0") (ifseqformula "3"))
                                 (opengoal " ")
                              )
                              (branch "f_2 = arr(result) FALSE"
                                 (rule "applyEqReverse" (formula "24") (term "1") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "eqSymm" (formula "23"))
                                 (opengoal " ")
                              )
                           )
                           (branch " (null, f_2) in rotateLogA(heap, self) & !f_2 = <created> FALSE"
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch "f_2 = arr(result) TRUE"
                                 (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "applyEq" (formula "19") (term "0,0,1") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "applyEq" (formula "22") (term "2,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "21") (term "1") (ifseqformula "2"))
                                 (rule "applyEq" (formula "19") (term "1") (ifseqformula "2"))
                                 (opengoal " ")
                              )
                              (branch "f_2 = arr(result) FALSE"
                                 (rule "close" (formula "23") (ifseqformula "2"))
                              )
                           )
                        )
                        (branch "CUT: o_2 = null FALSE"
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "notRight" (formula "23"))
                           (rule "replace_known_right" (formula "4") (term "1,0,0") (ifseqformula "23"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "applyEqReverse" (formula "24") (term "1") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch " (o_2, f_2) in rotateLogA(heap, self) & !f_2 = <created> TRUE"
                              (rule "andLeft" (formula "2"))
                              (rule "notLeft" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "ifthenelse_split" (formula "3") (term "0"))
                              (branch "f_2 = last & o_2 = self TRUE"
                                 (rule "andLeft" (formula "3"))
                                 (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "2") (term "1") (ifseqformula "3"))
                                 (rule "applyEqRigid" (formula "23") (term "1") (ifseqformula "3"))
                                 (rule "applyEq" (formula "25") (term "2,0") (ifseqformula "3"))
                                 (rule "narrowSelectType" (formula "25") (term "0") (ifseqformula "9"))
                                 (rule "applyEq" (formula "24") (term "0") (ifseqformula "4"))
                                 (rule "applyEqRigid" (formula "21") (term "0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "false_right" (formula "21"))
                                 (rule "applyEq" (formula "22") (term "0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "22") (term "1,0") (ifseqformula "3"))
                                 (rule "splitEquationSucc" (formula "22"))
                                 (branch "Case 1"
                                    (rule "inEqSimp_geqRight" (formula "22"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (opengoal " ")
                                 )
                                 (branch "Case 2"
                                    (rule "inEqSimp_leqRight" (formula "22"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (opengoal " ")
                                 )
                              )
                              (branch "f_2 = last & o_2 = self FALSE"
                                 (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "eqSymm" (formula "24"))
                                 (rule "cut_direct" (formula "19") (term "0"))
                                 (branch "CUT: f_2 = last TRUE"
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "applyEqRigid" (formula "25") (term "2,0") (ifseqformula "1"))
                                    (rule "narrowSelectType" (formula "25") (term "0") (ifseqformula "14"))
                                    (rule "eqSymm" (formula "25"))
                                    (rule "applyEqRigid" (formula "21") (term "0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "false_right" (formula "21"))
                                    (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "1"))
                                    (rule "applyEqRigid" (formula "22") (term "1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "24") (term "2,0") (ifseqformula "1"))
                                    (rule "narrowSelectType" (formula "24") (term "0") (ifseqformula "8"))
                                    (rule "eqSymm" (formula "24"))
                                    (rule "splitEquationSucc" (formula "24"))
                                    (branch "Case 1"
                                       (rule "inEqSimp_geqRight" (formula "24"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (opengoal " ")
                                    )
                                    (branch "Case 2"
                                       (rule "inEqSimp_leqRight" (formula "24"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (opengoal " ")
                                    )
                                 )
                                 (branch "CUT: f_2 = last FALSE"
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "false_right" (formula "20"))
                                    (opengoal " ")
                                 )
                              )
                           )
                           (branch " (o_2, f_2) in rotateLogA(heap, self) & !f_2 = <created> FALSE"
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch "f_2 = last & o_2 = self TRUE"
                                 (rule "andLeft" (formula "2"))
                                 (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                 (rule "applyEqRigid" (formula "21") (term "1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "23") (term "1,0") (ifseqformula "2"))
                                 (rule "applyEqRigid" (formula "23") (term "2,0") (ifseqformula "1"))
                                 (rule "narrowSelectType" (formula "23") (term "0") (ifseqformula "7"))
                                 (rule "applyEqRigid" (formula "19") (term "1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "22") (term "0") (ifseqformula "2"))
                                 (rule "applyEqRigid" (formula "19") (term "0,0,1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "applyEq" (formula "21") (term "0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "19") (term "0") (ifseqformula "2"))
                                 (rule "splitEquationSucc" (formula "22"))
                                 (branch "Case 1"
                                    (rule "inEqSimp_geqRight" (formula "22"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (opengoal " ")
                                 )
                                 (branch "Case 2"
                                    (rule "inEqSimp_leqRight" (formula "22"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (opengoal " ")
                                 )
                              )
                              (branch "f_2 = last & o_2 = self FALSE"
                                 (rule "close" (formula "24") (ifseqformula "2"))
                              )
                           )
                        )
                     )
                     (branch "CUT: Log_addE(heapAfter_rotateLog{self.last := result || null.arr(result) := bal}, heap, self, bal) FALSE"
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "false_right" (formula "18"))
                        (opengoal " ")
                     )
                  )
                  (branch "CUT: heapAfter_rotateLog{self.last := result || null.arr(result) := bal}[self.<inv>] FALSE"
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "false_right" (formula "17"))
                     (opengoal " ")
                  )
               )
               (branch "CUT: anon_heap_rotateLog<<anonHeapFunction>>[self.logRecord] = null FALSE"
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "cut_direct" (formula "17") (term "0,0"))
                  (branch "CUT: heapAfter_rotateLog{self.last := result || anon_heap_rotateLog<<anonHeapFunction>>[self.logRecord][result] := bal}[self.<inv>] TRUE"
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "cut_direct" (formula "18") (term "0"))
                     (branch "CUT: Log_addE(heapAfter_rotateLog{self.last := result || anon_heap_rotateLog<<anonHeapFunction>>[self.logRecord][result] := bal}, heap, self, bal) TRUE"
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "allRight" (formula "19") (inst "sk=f_1"))
                        (rule "allRight" (formula "19") (inst "sk=o_1"))
                        (rule "orRight" (formula "19"))
                        (rule "orRight" (formula "19"))
                        (rule "pullOutSelect" (formula "21") (term "0") (inst "selectSK=f_1_0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "22"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_2"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                        (rule "commute_and" (formula "3") (term "0,0"))
                        (rule "commute_and" (formula "2") (term "0,0"))
                        (rule "cut_direct" (formula "23") (term "0,0"))
                        (branch "CUT: o_1 = null TRUE"
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "false_right" (formula "24"))
                           (rule "applyEqRigid" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "3") (term "1,0,0"))
                           (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "22"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "applyEqRigid" (formula "22") (term "0") (ifseqformula "1"))
                           (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "23") (term "1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "3") (term "1,0,0"))
                           (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "20"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "applyEqRigid" (formula "2") (term "1,2,0") (ifseqformula "1"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch " (null, f_1) in rotateLogA(heap, self) & !f_1 = <created> TRUE"
                              (rule "andLeft" (formula "2"))
                              (rule "notLeft" (formula "3"))
                              (rule "applyEqReverse" (formula "24") (term "1") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "eqSymm" (formula "23"))
                              (opengoal " ")
                           )
                           (branch " (null, f_1) in rotateLogA(heap, self) & !f_1 = <created> FALSE"
                              (rule "close" (formula "23") (ifseqformula "2"))
                           )
                        )
                        (branch "CUT: o_1 = null FALSE"
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "notRight" (formula "24"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch " (o_1, f_1) in rotateLogA(heap, self) & !f_1 = <created> TRUE"
                              (rule "andLeft" (formula "2"))
                              (rule "notLeft" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "ifthenelse_split" (formula "3") (term "0"))
                              (branch "f_1 = last & o_1 = self TRUE"
                                 (rule "andLeft" (formula "3"))
                                 (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "applyEqRigid" (formula "25") (term "1") (ifseqformula "3"))
                                 (rule "applyEq" (formula "27") (term "2,0") (ifseqformula "3"))
                                 (rule "narrowSelectType" (formula "27") (term "0") (ifseqformula "10"))
                                 (rule "eqSymm" (formula "27"))
                                 (rule "applyEqRigid" (formula "22") (term "0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "false_right" (formula "22"))
                                 (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "3"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "25") (term "0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,1,0,0") (ifseqformula "4"))
                                 (rule "eqSymm" (formula "5") (term "1,0,0"))
                                 (rule "sortsDisjointModuloNull" (formula "5") (term "1,0,0"))
                                 (rule "replace_known_right" (formula "5") (term "0,1,0,0") (ifseqformula "22"))
                                 (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "23")))
                                 (rule "applyEqReverse" (formula "25") (term "0") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "eqSymm" (formula "24"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "22") (term "0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "23") (term "1,0") (ifseqformula "3"))
                                 (rule "splitEquationSucc" (formula "23"))
                                 (branch "Case 1"
                                    (rule "inEqSimp_geqRight" (formula "23"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (opengoal " ")
                                 )
                                 (branch "Case 2"
                                    (rule "inEqSimp_leqRight" (formula "23"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (opengoal " ")
                                 )
                              )
                              (branch "f_1 = last & o_1 = self FALSE"
                                 (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "ifthenelse_split" (formula "3") (term "0"))
                                 (branch " f_1 = arr(result) & o_1 = anon_heap_rotateLog<<anonHeapFunction>>[self.logRecord] TRUE"
                                    (rule "andLeft" (formula "3"))
                                    (rule "applyEqReverse" (formula "28") (term "1") (ifseqformula "5"))
                                    (rule "hideAuxiliaryEq" (formula "5"))
                                    (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "false_right" (formula "21"))
                                    (rule "applyEq" (formula "25") (term "0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "2") (term "0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "24") (term "1") (ifseqformula "3"))
                                    (rule "applyEq" (formula "25") (term "2,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "2") (term "1") (ifseqformula "3"))
                                    (rule "applyEq" (formula "24") (term "0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "4"))
                                    (rule "narrowSelectArrayType" (formula "25") (term "0") (ifseqformula "9") (ifseqformula "22"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "3"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "false_right" (formula "21"))
                                    (rule "splitEquationSucc" (formula "24"))
                                    (branch "Case 1"
                                       (rule "inEqSimp_geqRight" (formula "24"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (opengoal " ")
                                    )
                                    (branch "Case 2"
                                       (rule "inEqSimp_leqRight" (formula "24"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (opengoal " ")
                                    )
                                 )
                                 (branch " f_1 = arr(result) & o_1 = anon_heap_rotateLog<<anonHeapFunction>>[self.logRecord] FALSE"
                                    (rule "applyEqReverse" (formula "27") (term "1") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "eqSymm" (formula "26"))
                                    (rule "cut_direct" (formula "20") (term "1"))
                                    (branch "CUT: o_1 = self TRUE"
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "applyEq" (formula "20") (term "0,1") (ifseqformula "1"))
                                       (rule "eqSymm" (formula "20") (term "1"))
                                       (rule "sortsDisjointModuloNull" (formula "20") (term "1"))
                                       (rule "replace_known_right" (formula "20") (term "0,1") (ifseqformula "23"))
                                       (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "24")))
                                       (rule "false_right" (formula "20"))
                                       (rule "applyEq" (formula "25") (term "0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "25") (term "1,1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "24") (term "0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
                                       (opengoal " ")
                                    )
                                    (branch "CUT: o_1 = self FALSE"
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "false_right" (formula "21"))
                                       (rule "cut_direct" (formula "19") (term "0"))
                                       (branch "CUT: f_1 = arr(result) TRUE"
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "applyEq" (formula "3") (term "1") (ifseqformula "1"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "false_right" (formula "22"))
                                          (rule "applyEq" (formula "26") (term "2,1") (ifseqformula "1"))
                                          (rule "applyEq" (formula "26") (term "2,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "24") (term "1") (ifseqformula "1"))
                                          (opengoal " ")
                                       )
                                       (branch "CUT: f_1 = arr(result) FALSE"
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "false_right" (formula "20"))
                                          (opengoal " ")
                                       )
                                    )
                                 )
                              )
                           )
                           (branch " (o_1, f_1) in rotateLogA(heap, self) & !f_1 = <created> FALSE"
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch "f_1 = last & o_1 = self TRUE"
                                 (rule "andLeft" (formula "2"))
                                 (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "3"))
                                 (rule "applyEqRigid" (formula "24") (term "1") (ifseqformula "2"))
                                 (rule "applyEqRigid" (formula "21") (term "1,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                 (rule "applyEqRigid" (formula "25") (term "2,0") (ifseqformula "1"))
                                 (rule "narrowSelectType" (formula "25") (term "0") (ifseqformula "8"))
                                 (rule "eqSymm" (formula "25"))
                                 (rule "applyEqRigid" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "applyEqReverse" (formula "25") (term "0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "eqSymm" (formula "24"))
                                 (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "19") (term "0,0,1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "applyEq" (formula "22") (term "0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "23") (term "0") (ifseqformula "2"))
                                 (rule "splitEquationSucc" (formula "23"))
                                 (branch "Case 1"
                                    (rule "inEqSimp_geqRight" (formula "23"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (opengoal " ")
                                 )
                                 (branch "Case 2"
                                    (rule "inEqSimp_leqRight" (formula "23"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (opengoal " ")
                                 )
                              )
                              (branch "f_1 = last & o_1 = self FALSE"
                                 (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "ifthenelse_split" (formula "2") (term "0"))
                                 (branch " f_1 = arr(result) & o_1 = anon_heap_rotateLog<<anonHeapFunction>>[self.logRecord] TRUE"
                                    (rule "andLeft" (formula "2"))
                                    (rule "applyEqReverse" (formula "27") (term "1") (ifseqformula "4"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "false_right" (formula "20"))
                                    (rule "applyEq" (formula "23") (term "0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "25") (term "2,0") (ifseqformula "2"))
                                    (rule "narrowSelectArrayType" (formula "25") (term "0") (ifseqformula "8") (ifseqformula "21"))
                                    (rule "applyEq" (formula "20") (term "1,0") (ifseqformula "2"))
                                    (rule "applyEq" (formula "20") (term "0,0,1") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "applyEq" (formula "24") (term "0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "23") (term "1") (ifseqformula "2"))
                                    (rule "applyEq" (formula "20") (term "0") (ifseqformula "3"))
                                    (rule "splitEquationSucc" (formula "24"))
                                    (branch "Case 1"
                                       (rule "inEqSimp_geqRight" (formula "24"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (opengoal " ")
                                    )
                                    (branch "Case 2"
                                       (rule "inEqSimp_leqRight" (formula "24"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (opengoal " ")
                                    )
                                 )
                                 (branch " f_1 = arr(result) & o_1 = anon_heap_rotateLog<<anonHeapFunction>>[self.logRecord] FALSE"
                                    (rule "close" (formula "26") (ifseqformula "2"))
                                 )
                              )
                           )
                        )
                     )
                     (branch "CUT: Log_addE(heapAfter_rotateLog{self.last := result || anon_heap_rotateLog<<anonHeapFunction>>[self.logRecord][result] := bal}, heap, self, bal) FALSE"
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "false_right" (formula "19"))
                        (opengoal " ")
                     )
                  )
                  (branch "CUT: heapAfter_rotateLog{self.last := result || anon_heap_rotateLog<<anonHeapFunction>>[self.logRecord][result] := bal}[self.<inv>] FALSE"
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "false_right" (formula "18"))
                     (opengoal " ")
                  )
               )
            )
            (branch "(self, logRecord) in rotateLogA(heap, self) FALSE"
               (rule "applyEqReverse" (formula "16") (term "1,0,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "16") (term "1,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "16") (term "1,0,0,1,0,0,1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "cut_direct" (formula "15") (term "0,0"))
               (branch "CUT: heapAfter_rotateLog{self.last := result || self.logRecord[result] := bal}[self.<inv>] TRUE"
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "cut_direct" (formula "16") (term "0"))
                  (branch "CUT: Log_addE(heapAfter_rotateLog{self.last := result || self.logRecord[result] := bal}, heap, self, bal) TRUE"
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "allRight" (formula "17") (inst "sk=f_0"))
                     (rule "allRight" (formula "17") (inst "sk=o_0"))
                     (rule "orRight" (formula "17"))
                     (rule "orRight" (formula "17"))
                     (rule "pullOutSelect" (formula "19") (term "0") (inst "selectSK=f_0_0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "20"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
                     (rule "commute_and" (formula "3") (term "0,0"))
                     (rule "commute_and" (formula "2") (term "0,0"))
                     (rule "cut_direct" (formula "21") (term "0,0"))
                     (branch "CUT: o_0 = null TRUE"
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "false_right" (formula "22"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,0,0") (ifseqformula "1"))
                        (rule "eqSymm" (formula "4") (term "1,0,0"))
                        (rule "applyEq" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "applyEqRigid" (formula "2") (term "1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                        (rule "eqSymm" (formula "3") (term "1,0,0"))
                        (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "20"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "applyEqRigid" (formula "21") (term "1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "20") (term "0") (ifseqformula "1"))
                        (rule "commute_and" (formula "3") (term "0,0"))
                        (rule "ifthenelse_split" (formula "2") (term "0"))
                        (branch " (null, f_0) in rotateLogA(heap, self) & !f_0 = <created> TRUE"
                           (rule "andLeft" (formula "2"))
                           (rule "notLeft" (formula "3"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "ifthenelse_split" (formula "3") (term "0"))
                           (branch "self.logRecord = null & f_0 = arr(result) TRUE"
                              (rule "andLeft" (formula "3"))
                              (rule "applyEqReverse" (formula "24") (term "1") (ifseqformula "5"))
                              (rule "hideAuxiliaryEq" (formula "5"))
                              (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "19") (term "0") (ifseqformula "4"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "false_right" (formula "19"))
                              (rule "applyEq" (formula "21") (term "1") (ifseqformula "4"))
                              (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "2") (term "1") (ifseqformula "4"))
                              (rule "applyEq" (formula "22") (term "2,0") (ifseqformula "4"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "3") (term "0") (ifseqformula "7"))
                              (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "4"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "true_left" (formula "3"))
                              (opengoal " ")
                           )
                           (branch "self.logRecord = null & f_0 = arr(result) FALSE"
                              (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "eqSymm" (formula "22"))
                              (rule "cut_direct" (formula "17") (term "1"))
                              (branch "CUT: f_0 = arr(result) TRUE"
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "applyEq" (formula "23") (term "2,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "22") (term "1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "19") (term "0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "false_right" (formula "19"))
                                 (rule "applyEq" (formula "22") (term "2,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "3") (term "1") (ifseqformula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "5") (term "1,0") (ifseqformula "6"))
                                 (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (opengoal " ")
                              )
                              (branch "CUT: f_0 = arr(result) FALSE"
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "false_right" (formula "18"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "3") (term "1,0") (ifseqformula "5"))
                                 (rule "cut_direct" (formula "3") (term "0"))
                                 (branch "CUT: self.logRecord = null TRUE"
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "3"))
                                    (opengoal " ")
                                 )
                                 (branch "CUT: self.logRecord = null FALSE"
                                    (builtin "One Step Simplification" (formula "3"))
                                    (opengoal " ")
                                 )
                              )
                           )
                        )
                        (branch " (null, f_0) in rotateLogA(heap, self) & !f_0 = <created> FALSE"
                           (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch "self.logRecord = null & f_0 = arr(result) TRUE"
                              (rule "andLeft" (formula "2"))
                              (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "22") (term "2,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "18") (term "0,0,1") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "21") (term "1") (ifseqformula "3"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "2") (term "0") (ifseqformula "6"))
                              (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (opengoal " ")
                           )
                           (branch "self.logRecord = null & f_0 = arr(result) FALSE"
                              (rule "close" (formula "22") (ifseqformula "2"))
                           )
                        )
                     )
                     (branch "CUT: o_0 = null FALSE"
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "notRight" (formula "22"))
                        (rule "ifthenelse_split" (formula "2") (term "0"))
                        (branch " (o_0, f_0) in rotateLogA(heap, self) & !f_0 = <created> TRUE"
                           (rule "andLeft" (formula "2"))
                           (rule "notLeft" (formula "3"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "ifthenelse_split" (formula "3") (term "0"))
                           (branch "f_0 = last & o_0 = self TRUE"
                              (rule "andLeft" (formula "3"))
                              (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                              (rule "hideAuxiliaryEq" (formula "5"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "4"))
                              (rule "applyEq" (formula "2") (term "1") (ifseqformula "3"))
                              (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "false_right" (formula "20"))
                              (rule "applyEqRigid" (formula "22") (term "1") (ifseqformula "3"))
                              (rule "applyEqRigid" (formula "24") (term "2,0") (ifseqformula "3"))
                              (rule "narrowSelectType" (formula "24") (term "0") (ifseqformula "8"))
                              (rule "eqSymm" (formula "24"))
                              (rule "applyEq" (formula "22") (term "0") (ifseqformula "4"))
                              (rule "applyEqRigid" (formula "5") (term "0,0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "applyEqReverse" (formula "24") (term "0") (ifseqformula "5"))
                              (rule "hideAuxiliaryEq" (formula "5"))
                              (rule "eqSymm" (formula "23"))
                              (rule "applyEq" (formula "22") (term "0") (ifseqformula "4"))
                              (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "21") (term "1,0") (ifseqformula "3"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "1,0") (ifseqformula "6"))
                              (rule "cut_direct" (formula "4") (term "0"))
                              (branch "CUT: self.logRecord = null TRUE"
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "4"))
                                 (rule "splitEquationSucc" (formula "22"))
                                 (branch "Case 1"
                                    (rule "inEqSimp_geqRight" (formula "22"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (opengoal " ")
                                 )
                                 (branch "Case 2"
                                    (rule "inEqSimp_leqRight" (formula "22"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (opengoal " ")
                                 )
                              )
                              (branch "CUT: self.logRecord = null FALSE"
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "splitEquationSucc" (formula "23"))
                                 (branch "Case 1"
                                    (rule "inEqSimp_geqRight" (formula "23"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (opengoal " ")
                                 )
                                 (branch "Case 2"
                                    (rule "inEqSimp_leqRight" (formula "23"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (opengoal " ")
                                 )
                              )
                           )
                           (branch "f_0 = last & o_0 = self FALSE"
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "ifthenelse_split" (formula "3") (term "0"))
                              (branch "f_0 = arr(result) & o_0 = self.logRecord TRUE"
                                 (rule "andLeft" (formula "3"))
                                 (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "applyEq" (formula "25") (term "2,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "false_right" (formula "19"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "19") (term "0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "false_right" (formula "19"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "21") (term "0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "22") (term "0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "21") (term "1") (ifseqformula "3"))
                                 (rule "applyEq" (formula "2") (term "1") (ifseqformula "3"))
                                 (rule "applyEq" (formula "23") (term "1,0") (ifseqformula "4"))
                                 (rule "narrowSelectArrayType" (formula "23") (term "0") (ifseqformula "7") (ifseqformula "22"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "6") (term "1,0") (ifseqformula "7"))
                                 (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "23")))
                                 (rule "true_left" (formula "6"))
                                 (rule "splitEquationSucc" (formula "23"))
                                 (branch "Case 1"
                                    (rule "inEqSimp_geqRight" (formula "23"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (opengoal " ")
                                 )
                                 (branch "Case 2"
                                    (rule "inEqSimp_leqRight" (formula "23"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (opengoal " ")
                                 )
                              )
                              (branch "f_0 = arr(result) & o_0 = self.logRecord FALSE"
                                 (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "eqSymm" (formula "24"))
                                 (rule "cut_direct" (formula "18") (term "0"))
                                 (branch "CUT: f_0 = last TRUE"
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "applyEq" (formula "25") (term "2,0") (ifseqformula "1"))
                                    (rule "narrowSelectType" (formula "25") (term "0") (ifseqformula "12"))
                                    (rule "eqSymm" (formula "25"))
                                    (rule "applyEqRigid" (formula "18") (term "0,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "false_right" (formula "18"))
                                    (rule "applyEq" (formula "3") (term "1") (ifseqformula "1"))
                                    (rule "applyEqRigid" (formula "22") (term "1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "19") (term "0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "false_right" (formula "19"))
                                    (rule "applyEq" (formula "23") (term "2,0") (ifseqformula "1"))
                                    (rule "narrowSelectType" (formula "23") (term "0") (ifseqformula "6"))
                                    (rule "eqSymm" (formula "23"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "1,0") (ifseqformula "6"))
                                    (rule "cut_direct" (formula "4") (term "0"))
                                    (branch "CUT: self.logRecord = null TRUE"
                                       (builtin "One Step Simplification" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "4"))
                                       (rule "splitEquationSucc" (formula "24"))
                                       (branch "Case 1"
                                          (rule "inEqSimp_geqRight" (formula "24"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (opengoal " ")
                                       )
                                       (branch "Case 2"
                                          (rule "inEqSimp_leqRight" (formula "24"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (opengoal " ")
                                       )
                                    )
                                    (branch "CUT: self.logRecord = null FALSE"
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "splitEquationSucc" (formula "25"))
                                       (branch "Case 1"
                                          (rule "inEqSimp_geqRight" (formula "25"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (opengoal " ")
                                       )
                                       (branch "Case 2"
                                          (rule "inEqSimp_leqRight" (formula "25"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (opengoal " ")
                                       )
                                    )
                                 )
                                 (branch "CUT: f_0 = last FALSE"
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "false_right" (formula "19"))
                                    (rule "cut_direct" (formula "17") (term "0"))
                                    (branch "CUT: f_0 = arr(result) TRUE"
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "applyEq" (formula "25") (term "2,1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "23") (term "1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "false_right" (formula "19"))
                                       (rule "applyEq" (formula "24") (term "2,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "false_right" (formula "19"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "5") (term "1,0") (ifseqformula "6"))
                                       (rule "cut_direct" (formula "5") (term "0"))
                                       (branch "CUT: self.logRecord = null TRUE"
                                          (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "19") (term "1") (ifseqformula "5"))
                                          (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "5"))
                                          (opengoal " ")
                                       )
                                       (branch "CUT: self.logRecord = null FALSE"
                                          (builtin "One Step Simplification" (formula "5"))
                                          (opengoal " ")
                                       )
                                    )
                                    (branch "CUT: f_0 = arr(result) FALSE"
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "false_right" (formula "18"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "3") (term "1,0") (ifseqformula "5"))
                                       (rule "cut_direct" (formula "3") (term "0"))
                                       (branch "CUT: self.logRecord = null TRUE"
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "3"))
                                          (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "3"))
                                          (opengoal " ")
                                       )
                                       (branch "CUT: self.logRecord = null FALSE"
                                          (builtin "One Step Simplification" (formula "3"))
                                          (opengoal " ")
                                       )
                                    )
                                 )
                              )
                           )
                        )
                        (branch " (o_0, f_0) in rotateLogA(heap, self) & !f_0 = <created> FALSE"
                           (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch "f_0 = last & o_0 = self TRUE"
                              (rule "andLeft" (formula "2"))
                              (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "applyEqRigid" (formula "22") (term "1") (ifseqformula "2"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "3"))
                              (rule "applyEqRigid" (formula "4") (term "0,0,0,0") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "22") (term "2,0") (ifseqformula "2"))
                              (rule "narrowSelectType" (formula "22") (term "0") (ifseqformula "6"))
                              (rule "applyEq" (formula "18") (term "0,0,1") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "applyEq" (formula "21") (term "0") (ifseqformula "3"))
                              (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "17") (term "1") (ifseqformula "1"))
                              (rule "applyEq" (formula "21") (term "1,0") (ifseqformula "2"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "3") (term "1,0") (ifseqformula "5"))
                              (rule "cut_direct" (formula "3") (term "0"))
                              (branch "CUT: self.logRecord = null TRUE"
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "3"))
                                 (rule "splitEquationSucc" (formula "22"))
                                 (branch "Case 1"
                                    (rule "inEqSimp_geqRight" (formula "22"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (opengoal " ")
                                 )
                                 (branch "Case 2"
                                    (rule "inEqSimp_leqRight" (formula "22"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (opengoal " ")
                                 )
                              )
                              (branch "CUT: self.logRecord = null FALSE"
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "splitEquationSucc" (formula "23"))
                                 (branch "Case 1"
                                    (rule "inEqSimp_geqRight" (formula "23"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (opengoal " ")
                                 )
                                 (branch "Case 2"
                                    (rule "inEqSimp_leqRight" (formula "23"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (opengoal " ")
                                 )
                              )
                           )
                           (branch "f_0 = last & o_0 = self FALSE"
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch "f_0 = arr(result) & o_0 = self.logRecord TRUE"
                                 (rule "andLeft" (formula "2"))
                                 (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "18") (term "0,1") (ifseqformula "3"))
                                 (rule "sortsDisjointModuloNull" (formula "18") (term "1"))
                                 (rule "replace_known_right" (formula "18") (term "1,1") (ifseqformula "21"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "false_right" (formula "18"))
                                 (rule "applyEq" (formula "22") (term "0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "23") (term "1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "18") (term "0,0,1") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "applyEq" (formula "21") (term "1") (ifseqformula "2"))
                                 (rule "applyEq" (formula "21") (term "0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "23") (term "2,0") (ifseqformula "2"))
                                 (rule "narrowSelectArrayType" (formula "23") (term "0") (ifseqformula "6") (ifseqformula "22"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "5") (term "1,0") (ifseqformula "6"))
                                 (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "23")))
                                 (rule "true_left" (formula "5"))
                                 (rule "splitEquationSucc" (formula "23"))
                                 (branch "Case 1"
                                    (rule "inEqSimp_geqRight" (formula "23"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (opengoal " ")
                                 )
                                 (branch "Case 2"
                                    (rule "inEqSimp_leqRight" (formula "23"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (opengoal " ")
                                 )
                              )
                              (branch "f_0 = arr(result) & o_0 = self.logRecord FALSE"
                                 (rule "close" (formula "24") (ifseqformula "2"))
                              )
                           )
                        )
                     )
                  )
                  (branch "CUT: Log_addE(heapAfter_rotateLog{self.last := result || self.logRecord[result] := bal}, heap, self, bal) FALSE"
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "false_right" (formula "17"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "16") (term "1,0") (ifseqformula "2"))
                     (rule "cut_direct" (formula "1") (term "0"))
                     (branch "CUT: self.logRecord = null TRUE"
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
                        (opengoal " ")
                     )
                     (branch "CUT: self.logRecord = null FALSE"
                        (builtin "One Step Simplification" (formula "1"))
                        (opengoal " ")
                     )
                  )
               )
               (branch "CUT: heapAfter_rotateLog{self.last := result || self.logRecord[result] := bal}[self.<inv>] FALSE"
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "false_right" (formula "16"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "1,0") (ifseqformula "1"))
                  (rule "cut_direct" (formula "1") (term "0"))
                  (branch "CUT: self.logRecord = null TRUE"
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "1"))
                     (opengoal " ")
                  )
                  (branch "CUT: self.logRecord = null FALSE"
                     (builtin "One Step Simplification" (formula "1"))
                     (opengoal " ")
                  )
               )
            )
         )
         (branch "Null Reference (x_arr_1 = null)"
            (builtin "One Step Simplification" (formula "1"))
            (rule "false_right" (formula "16"))
            (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "1"))
            (rule "ifEqualsNull" (formula "2"))
            (rule "cnf_rightDist" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "commute_or" (formula "2"))
            (rule "cnf_rightDist" (formula "3"))
            (rule "andLeft" (formula "3"))
            (rule "commute_or" (formula "4"))
            (rule "commute_or" (formula "3"))
            (rule "cnf_rightDist" (formula "2"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "commute_or" (formula "2"))
            (rule "cut_direct" (formula "4") (term "0"))
            (branch "CUT: self.logRecord = null TRUE"
               (builtin "One Step Simplification" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "4"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "3") (term "0") (ifseqformula "4"))
               (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "4"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "2") (term "0,1") (ifseqformula "10"))
               (rule "cut_direct" (formula "3") (term "1"))
               (branch "CUT: anon_heap_rotateLog<<anonHeapFunction>>[self.logRecord] = null TRUE"
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (opengoal " ")
               )
               (branch "CUT: anon_heap_rotateLog<<anonHeapFunction>>[self.logRecord] = null FALSE"
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "notLeft" (formula "3"))
                  (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "17"))
                  (builtin "One Step Simplification" (formula "2"))
                  (opengoal " ")
               )
            )
            (branch "CUT: self.logRecord = null FALSE"
               (builtin "One Step Simplification" (formula "4"))
               (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "17"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "4"))
               (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "3")))
               (rule "true_left" (formula "2"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "3") (term "0") (ifseqformula "10"))
               (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "4"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "16") (term "0") (ifseqformula "4"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "17"))
               (builtin "One Step Simplification" (formula "1"))
               (opengoal " ")
            )
         )
         (branch "Index Out of Bounds (x_arr_1 != null, but x_1 Out of Bounds!)"
            (builtin "One Step Simplification" (formula "16"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "false_right" (formula "16"))
            (rule "andLeft" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "1,1"))
            (rule "commute_or" (formula "1"))
            (rule "ifthenelse_split" (formula "2") (term "0"))
            (branch "(self, logRecord) in rotateLogA(heap, self) TRUE"
               (rule "applyEqReverse" (formula "1") (term "0,0,1") (ifseqformula "3"))
               (rule "applyEqReverse" (formula "16") (term "0") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "cut_direct" (formula "1") (term "0"))
               (branch "CUT: result <= -1 TRUE"
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "0") (ifseqformula "9"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "1"))
                  (opengoal " ")
               )
               (branch "CUT: result <= -1 FALSE"
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_leqRight" (formula "15"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                  (rule "times_zero_1" (formula "2") (term "0,0"))
                  (rule "add_zero_left" (formula "2") (term "0"))
                  (rule "arrayLengthIsAShort" (formula "3") (term "0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "3") (term "0,0") (ifseqformula "11"))
                  (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "18"))
                  (builtin "One Step Simplification" (formula "3"))
                  (opengoal " ")
               )
            )
            (branch "(self, logRecord) in rotateLogA(heap, self) FALSE"
               (rule "applyEqReverse" (formula "1") (term "0,0,1") (ifseqformula "2"))
               (rule "applyEqReverse" (formula "16") (term "0") (ifseqformula "2"))
               (rule "hideAuxiliaryEq" (formula "2"))
               (rule "cut_direct" (formula "1") (term "0"))
               (branch "CUT: result <= -1 TRUE"
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "0") (ifseqformula "2"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "1"))
                  (opengoal " ")
               )
               (branch "CUT: result <= -1 FALSE"
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_leqRight" (formula "14"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "arrayLengthIsAShort" (formula "2") (term "0"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                  (rule "times_zero_1" (formula "2") (term "0,0"))
                  (rule "add_zero_left" (formula "2") (term "0"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "3") (term "0,0") (ifseqformula "4"))
                  (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "18"))
                  (builtin "One Step Simplification" (formula "3"))
                  (opengoal " ")
               )
            )
         )
      )
      (branch "Null Reference (l = null)"
         (rule "false_right" (formula "15"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Exceptional Post (rotateLog)"
      (builtin "One Step Simplification" (formula "10"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,0") (ifseqformula "8"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "11"))
      (rule "notLeft" (formula "9"))
      (rule "andLeft" (formula "10"))
      (rule "close" (formula "13") (ifseqformula "11"))
   )
   (branch "Pre (rotateLog)"
      (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "6")) (ifInst ""  (formula "1")))
      (opengoal " ")
   )
)
(branch "Null Reference (this = null)"
   (rule "false_right" (formula "9"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
   (rule "closeFalse" (formula "1"))
)
)

}
